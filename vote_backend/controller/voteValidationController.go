package controller

import (
	"log"
	"reflect"
	"vote_backend/models"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

func ValidateVote(newVote models.Transaction) bool {
	voteValid := true
	// ensure that the txid is valid, and was generated by an official client app
	// -generate a random string in the client 8 characters long
	// -get the devices serial number
	// -create a string from both starting with the random string
	// -hash the string, the hash is the txid

	// -on the backend, unhash the txid
	// -remove the first 8 characters
	// -check if the remaining string matches the devices serial number

	// ensure that the nodeID is valid
	database, err := gorm.Open(sqlite.Open("nodeDB.sql"), &gorm.Config{})
	if err != nil {
		panic(err)
	}
	client := models.DesktopClient{}
	if err := database.Where("serial_number=?", newVote.NodeId).First(&client).Error; err != nil {
		log.Fatalln(err)
	}
	if reflect.ValueOf(client).IsZero() {
		//empty struct
		voteValid = false
	}

	// ensure that the candidate id is valid
	candidate := models.Candidate{}
	if err := database.Where("candidate_id=?", newVote.CandidateId).First(&candidate).Error; err != nil {
		log.Fatalln(err)
	}
	if reflect.ValueOf(client).IsZero() {
		//empty struct
		voteValid = false
	}
	// ensure that the voter exists and that the voters details hash matches the stored hash
	// ensure that the voter hasnt already voted
	// insert verified transaction into db

	return voteValid
}
